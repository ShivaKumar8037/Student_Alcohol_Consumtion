y = "Count"
) +
stat_count(geom = "text", aes(label = ..count..), vjust = -0.5) +
theme_minimal()
ggplot(mathData, aes(x = higher)) +
geom_bar(fill = "skyblue") +
labs(
title = " Are they planning on taking higher studies",
x = "Higher studies",
y = "Count"
) +
stat_count(geom = "text", aes(label = ..count..), vjust = -0.5) +
theme_minimal()
ggplot(porData, aes(x = internet)) +
geom_bar(fill = "#FF6666") +
labs(
title = "Internet acess at home",
x = "Internet",
y = "Count"
) +
stat_count(geom = "text", aes(label = ..count..), vjust = -0.5) +
theme_minimal()
ggplot(mathData, aes(x = internet)) +
geom_bar(fill = "skyblue") +
labs(
title = "Internet acess at home",
x = "Internet",
y = "Count"
) +
stat_count(geom = "text", aes(label = ..count..), vjust = -0.5) +
theme_minimal()
ggplot(porData, aes(x = romantic)) +
geom_bar(fill = "#FF6666") +
labs(
title = " Are they in romantic relationship ",
x = "Relationship",
y = "Count"
) +
stat_count(geom = "text", aes(label = ..count..), vjust = -0.5) +
theme_minimal()
ggplot(mathData, aes(x = romantic)) +
geom_bar(fill = "skyblue") +
labs(
title = " Are they in romantic relationship ",
x = "Relationship",
y = "Count"
) +
stat_count(geom = "text", aes(label = ..count..), vjust = -0.5) +
theme_minimal()
ggplot(porData, aes(x = famrel)) +
geom_bar(fill = "#FF6666") +
labs(
title = " Family Relationship ",
x = "Famrel",
y = "Count"
) +
stat_count(geom = "text", aes(label = ..count..), vjust = -0.5) +
theme_minimal()
ggplot(mathData, aes(x = famrel)) +
geom_bar(fill = "skyblue") +
labs(
title = " Family Relationship ",
x = "Famrel",
y = "Count"
) +
stat_count(geom = "text", aes(label = ..count..), vjust = -0.5) +
theme_minimal()
ggplot(porData, aes(x = freetime)) +
geom_bar(fill = "#FF6666") +
labs(
title = " How much freetime ",
x = "Free time",
y = "Count"
) +
stat_count(geom = "text", aes(label = ..count..), vjust = -0.5) +
theme_minimal()
ggplot(mathData, aes(x = freetime)) +
geom_bar(fill = "skyblue") +
labs(
title = " How much freetime ",
x = "Free time",
y = "Count"
) +
stat_count(geom = "text", aes(label = ..count..), vjust = -0.5) +
theme_minimal()
ggplot(porData, aes(x = goout)) +
geom_bar(fill = "#FF6666") +
labs(
title = " Are they gng out with frnds ",
x = "gng out with frnds",
y = "Count"
) +
stat_count(geom = "text", aes(label = ..count..), vjust = -0.5) +
theme_minimal()
ggplot(mathData, aes(x = goout)) +
geom_bar(fill = "skyblue") +
labs(
title = " Are they gng out with frnds ",
x = "gng out with frnds",
y = "Count"
) +
stat_count(geom = "text", aes(label = ..count..), vjust = -0.5) +
theme_minimal()
ggplot(porData, aes(x = Dalc)) +
geom_bar(fill = "#FF6666") +
labs(
title = " Workday alc consump ",
x = "Drinking alc",
y = "Count"
) +
stat_count(geom = "text", aes(label = ..count..), vjust = -0.5) +
theme_minimal()
ggplot(mathData, aes(x = Dalc)) +
geom_bar(fill = "skyblue") +
labs(
title = " Workday alc consump ",
x = "Drinking alc",
y = "Count"
) +
stat_count(geom = "text", aes(label = ..count..), vjust = -0.5) +
theme_minimal()
ggplot(porData, aes(x = Walc)) +
geom_bar(fill = "#FF6666") +
labs(
title = " Weekend alc consump ",
x = "Drinking alc",
y = "Count"
) +
stat_count(geom = "text", aes(label = ..count..), vjust = -0.5) +
theme_minimal()
ggplot(mathData, aes(x = Walc)) +
geom_bar(fill = "skyblue") +
labs(
title = " Weekend alc consump ",
x = "Drinking alc",
y = "Count"
) +
stat_count(geom = "text", aes(label = ..count..), vjust = -0.5) +
theme_minimal()
ggplot(porData, aes(x = health)) +
geom_bar(fill = "#FF6666") +
labs(
title = " Health Status ",
x = "Health",
y = "Count"
) +
stat_count(geom = "text", aes(label = ..count..), vjust = -0.5) +
theme_minimal()
ggplot(mathData, aes(x = health)) +
geom_bar(fill = "skyblue") +
labs(
title = " Health Status ",
x = "Health",
y = "Count"
) +
stat_count(geom = "text", aes(label = ..count..), vjust = -0.5) +
theme_minimal()
ggplot(porData, aes(x = absences)) +
geom_bar(fill = "#FF6666") +
labs(
title = " Absent days ",
x = "No of days",
y = "Count"
) +
stat_count(geom = "text", aes(label = ..count..), vjust = -0.5) +
theme_minimal()
ggplot(mathData, aes(x = absences)) +
geom_bar(fill = "skyblue") +
labs(
title = " Absent days ",
x = "No of days",
y = "Count"
) +
stat_count(geom = "text", aes(label = ..count..), vjust = -0.5) +
theme_minimal()
non_numeric_columns <- names(porData)[sapply(porData, function(col) !is.numeric(col))]
cat("These are non-numeric columns:", non_numeric_columns, "\n\n")
numeric_columns <- names(porData)[sapply(porData, is.numeric)]
cat("These are numeric columns:", numeric_columns, "\n")
non_numeric <- names(porData)[sapply(porData, function(col) !is.numeric(col))]
for (col in non_numeric){
print(paste("The column ", col, "has ", length(unique(porData[[col]])), ' unique values they are: '))
print((unique(porData[[col]])))
cat('\n')
}
binary_columns <- c()
multi_unique_columns <- c()
for (col in non_numeric) {
num_unique <- length(unique(porData[[col]]))
if (num_unique == 2) {
binary_columns <- c(binary_columns, col)
} else if (num_unique > 2) {
multi_unique_columns <- c(multi_unique_columns, col)
}
}
print(paste("Binary columns:", paste(binary_columns, collapse = ", ")))
cat('\n')
print(paste("Multi unique value columns:", paste(multi_unique_columns, collapse = ", ")))
cat('----Portugese Data----\n\n')
for (col in binary_columns) {
if ("yes" %in% porData[[col]] && "no" %in% porData[[col]]) {
porData[[col]] <- ifelse(porData[[col]] == "yes", 1, 0)
} else {
unique_vals <- unique(porData[[col]])
porData[[col]] <- ifelse(porData[[col]] == unique_vals[1], 0, 1)
print(paste("Portugese's Feature:",col, ' is encoded ', unique_vals[1],' as 0 ', unique_vals[2],' as 1'))
}
}
cat('\n----Math Data----\n\n')
# Doing for Math data too
for (col in binary_columns) {
if ("yes" %in% mathData[[col]] && "no" %in% mathData[[col]]) {
mathData[[col]] <- ifelse(mathData[[col]] == "yes", 1, 0)
} else {
unique_vals <- unique(mathData[[col]])
mathData[[col]] <- ifelse(mathData[[col]] == unique_vals[1], 0, 1)
print(paste("Math's Feature:",col, ' is encoded ', unique_vals[1],' as 0 ', unique_vals[2],' as 1'))
}
}
cat('----Portugese Data----\n\n')
for (col in multi_unique_columns) {
formula_str <- paste("~ 0 +", col)
one_hot <- model.matrix(as.formula(formula_str), data = porData)
one_hot_df <- as.data.frame(one_hot)
colnames(one_hot_df) <- gsub("^.\\.", col, colnames(one_hot_df))
porData <- cbind(porData, one_hot_df)
porData[[col]] <- NULL
}
head(porData)
cat('\n----Math Data----\n\n')
# for Math data
for (col in multi_unique_columns) {
formula_str <- paste("~ 0 +", col)
one_hot <- model.matrix(as.formula(formula_str), data = mathData)
one_hot_df <- as.data.frame(one_hot)
colnames(one_hot_df) <- gsub("^.\\.", col, colnames(one_hot_df))
mathData <- cbind(mathData, one_hot_df)
mathData[[col]] <- NULL
}
head(mathData)
#Por's Model
modelPor_Fedu <- lm(G3 ~ Fedu, data = porData)
summary(modelPor_Fedu)
plot(porData$Fedu, porData$G3, main="Fathers's Education (Fedu) vs. Final Grade (G3) for Portuguese Data", xlab="Father's Education", ylab="Final Grade (G3)")
abline(modelPor_Fedu, col="red")
#Math's Model
modelMath_Fedu <- lm(G3 ~ Fedu, data = mathData)
summary(modelMath_Fedu)
plot(mathData$Fedu, mathData$G3, main="Fathers's Education (Fedu) vs. Final Grade (G3) for Math Data", xlab="Father's Education", ylab="Final Grade (G3)")
abline(modelMath_Fedu, col="red")
modelPor_Medu <- lm(G3 ~ Medu, data = porData)
summary(modelPor_Medu)
plot(porData$Medu, porData$G3, main="Mother's Education (Medu) vs. Final Grade (G3) for Portuguese Data", xlab="Mother's Education", ylab="Final Grade (G3)")
abline(modelPor_Medu, col="red")
#Math's Model
modelMath_Medu <- lm(G3 ~ Medu, data = mathData)
summary(modelMath_Medu)
plot(mathData$Medu, mathData$G3, main="Mother's Education (Medu) vs. Final Grade (G3) for Math Data ", xlab="Mother's Education", ylab="Final Grade (G3)")
abline(modelMath_Medu, col="red")
modelPor_Edu <- lm(G3 ~ Medu + Fedu , data = porData)
summary(modelPor_Edu)
coefplot(modelPor_Edu)
modelMath_Edu <- lm(G3 ~ Medu + Fedu , data = mathData)
summary(modelMath_Edu)
coefplot(modelMath_Edu)
modelPor_Study = lm(G3 ~ studytime, data=porData)
summary(modelPor_Study)
plot(porData$studytime, porData$G3, main="Study Time (studytime) vs. Final Grade (G3) for Portuguese Data", xlab="Study time", ylab="Final Grade (G3)")
abline(modelPor_Study, col="red")
modelMath_Study <- lm(G3 ~ studytime, data=mathData)
summary(modelMath_Study)
plot(mathData$studytime, mathData$G3, main="Study Time (studytime) vs. Final Grade (G3) for Math Data", xlab="Study time", ylab="Final Grade (G3)")
abline(modelMath_Study, col="red")
modelPor_Absences <- lm(G3 ~ absences, data=porData)
summary(modelPor_Absences)
plot(porData$absences, porData$G3, main="Absences vs. Final Grade (G3) for Portuguese Data", xlab="Number of Absences", ylab="Final Grade (G3)")
abline(modelPor_Absences, col="red")
modelMath_Absences <- lm(G3 ~ absences, data=mathData)
summary(modelMath_Absences)
plot(mathData$absences, mathData$G3, main="Absences vs. Final Grade (G3) for Math Data", xlab="Number of Absences", ylab="Final Grade (G3)")
abline(modelMath_Absences, col="red")
multiplot(modelPor_Absences, modelMath_Absences, names=c("Portuguese Model", "Math Model"))
modelPor_Dalc <- lm(G3 ~ Dalc, data=porData)
summary(modelPor_Dalc)
plot(porData$Dalc, porData$G3, main="Workday Alcohol Consumption (Dalc) vs. Final Grade (G3) for Portuguese Data", xlab="Dalc", ylab="Final Grade (G3)")
abline(modelPor_Dalc, col="red")
modelMath_Dalc <- lm(G3 ~ Dalc, data=mathData)
summary(modelMath_Dalc)
plot(mathData$Dalc, mathData$G3, main="Workday Alcohol Consumption (Dalc) vs. Final Grade (G3) for Math Data", xlab="Dalc", ylab="Final Grade (G3)")
abline(modelMath_Dalc, col="red")
multiplot(modelPor_Dalc,modelMath_Dalc, names=c('Daily Alc consumption for Portuguese Data', 'Daily Alc consumption for Math Data'))
modelPor_Walc <- lm(G3 ~ Walc, data=porData)
summary(modelPor_Walc)
plot(porData$Walc, porData$G3, main="Weekend Alcohol Consumption (Walc) vs. Final Grade (G3) for Portuguese Data", xlab="Walc", ylab="Final Grade (G3)")
abline(modelPor_Walc, col="red")
modelMath_Walc <- lm(G3 ~ Walc, data=mathData)
summary(modelMath_Walc)
plot(mathData$Walc, mathData$G3, main="Weekend Alcohol Consumption (Walc) vs. Final Grade (G3) for Math Data", xlab="Walc", ylab="Final Grade (G3)")
abline(modelMath_Walc, col="red")
multiplot(modelPor_Walc,modelMath_Walc, names=c('Weekly Alc consumption for Portuguese Data', 'Weekly Alc consumption for Math Data'))
multiplot(modelPor_Dalc,modelMath_Dalc,modelPor_Walc,modelMath_Walc, names=c('Daily Alc consumption for Portuguese Data', 'Daily Alc consumption for Math Data','Weekly Alc consumption for Portuguese Data', 'Weekly Alc consumption for Math Data'))
modelPor_Multi <- lm(G3 ~ Medu + Fedu + studytime + Dalc + Walc , data = porData)
summary(modelPor_Multi)
coefplot(modelPor_Multi, title ='Coefficient Plot for modelPor_Multi model')
modelMath_Multi <- lm(G3 ~ Medu + Fedu + studytime + Dalc + Walc , data = mathData)
summary(modelMath_Multi)
coefplot(modelMath_Multi,title ='Coefficient Plot for modelMath_Multi model')
corMath <- cor(mathData)
corrplot(corMath)
corPor <- cor(porData)
corrplot(corPor)
G3Por_cor <- corPor[,'G3']
plot_ly(x = names(G3Por_cor), y = G3Por_cor, type = 'bar') %>%
layout(title = "Correlation of Final Grade(G3) with Other Variables for Portuguese Data", yaxis = list(title = "Correlation Coefficient"))
G3Math_cor <- corMath[,'G3']
plot_ly(x = names(G3Math_cor), y = G3Math_cor, type = 'bar') %>%
layout(title = "Correlation of Final Grade(G3) with Other Variables for Math Data", yaxis = list(title = "Correlation Coefficient"))
sorted_names <- names(sort(G3Por_cor))
factor_names <- factor(names(G3Por_cor), levels = sorted_names)
plot_ly(x = factor_names, y = G3Por_cor, type = 'bar') %>%
layout(title = "Correlation of G3 with Other Variables in Increasing Order for Portuguese Data",
yaxis = list(title = "Correlation Coefficient"))
# For Math Data
sorted_names <- names(sort(G3Math_cor))
factor_names <- factor(names(G3Math_cor), levels = sorted_names)
plot_ly(x = factor_names, y = G3Math_cor, type = 'bar') %>%
layout(title = "Correlation of G3 with Other Variables in Increasing Order for Math Data",
yaxis = list(title = "Correlation Coefficient"))
mathData <- mathData %>% select(-G1, -G2)
porData <- porData %>% select(-G1, -G2)
G3Por_cor <-  cor(porData)[,'G3']
G3Math_cor <-  cor(mathData)[,'G3']
sorted_names <- names(sort(G3Por_cor))
factor_names <- factor(names(G3Por_cor), levels = sorted_names)
plot_ly(x = factor_names, y = G3Por_cor, type = 'bar') %>%
layout(title = "Correlation of G3 with Other Variables in Increasing Order for Portuguese Data",
yaxis = list(title = "Correlation Coefficient"))
# For Math Data
sorted_names <- names(sort(G3Math_cor))
factor_names <- factor(names(G3Math_cor), levels = sorted_names)
plot_ly(x = factor_names, y = G3Math_cor, type = 'bar') %>%
layout(title = "Correlation of G3 with Other Variables in Increasing Order for Math Data",
yaxis = list(title = "Correlation Coefficient"))
set.seed(123)
cat('\n\n--------------For Portuguese Data--------------\n\n')
split = sample.split(porData$G3, SplitRatio = 0.8)
train_data = subset(porData, split == TRUE)
test_data = subset(porData, split == FALSE)
model <- lm(G3 ~ ., data = train_data)
print(summary(model))
# for Math Data
cat('\n\n--------------For Math Data--------------\n\n')
split = sample.split(mathData$G3, SplitRatio = 0.8)
train_data = subset(mathData, split == TRUE)
test_data = subset(mathData, split == FALSE)
modelMath <- lm(G3 ~ ., data = train_data)
print(summary(modelMath))
porData <- porData %>% select(-Mjobteacher, -Fjobteacher,-reasonreputation,-guardianother)
mathData <- mathData %>% select(-Mjobteacher, -Fjobteacher,-reasonreputation,-guardianother)
set.seed(123)
# For Portuguese Data
cat('\n\n--------------For Portuguese Data--------------\n\n')
split = sample.split(porData$G3, SplitRatio = 0.8)
train_data = subset(porData, split == TRUE)
test_data = subset(porData, split == FALSE)
model <- lm(G3 ~ ., data = train_data)
print(summary(model))
# Compute RMSE for Portuguese Data
predicted_values <- predict(model, newdata = test_data)
actual_values <- test_data$G3
rmse_por <- rmse(actual_values, predicted_values)
cat('RMSE for Portuguese Data:', rmse_por, '\n')
# For Math Data
cat('\n\n--------------For Math Data--------------\n\n')
split = sample.split(mathData$G3, SplitRatio = 0.8)
train_data = subset(mathData, split == TRUE)
test_data = subset(mathData, split == FALSE)
modelMath <- lm(G3 ~ ., data = train_data)
print(summary(modelMath))
# Compute RMSE for Math Data
predicted_values_math <- predict(modelMath, newdata = test_data)
actual_values_math <- test_data$G3
rmse_math <- rmse(actual_values_math, predicted_values_math)
cat('RMSE for Math Data:', rmse_math, '\n')
coefplot(model, title = 'Coefficient Plot for Portuguese Data')
coefplot(modelMath, title = 'Coefficient Plot for Math Data')
coefficients <- coef(model)
sorted_coefficients <- coefficients[order(abs(coefficients), decreasing = TRUE)]
coefplot(model,title='Coefficient Plot for Portuguese Data',  sort = "magnitude")
coefficientsMath <- coef(modelMath)
sorted_coefficientsMath <- coefficientsMath[order(abs(coefficientsMath), decreasing = TRUE)]
coefplot(modelMath,title='Coefficient Plot for Math Data',  sort = "magnitude")
sorted_names <- names(sort(sorted_coefficients))
factor_names <- factor(names(sorted_coefficients), levels = sorted_names)
plot_ly(x = factor_names, y = sorted_coefficients, type = 'bar') %>%
layout(title = "Sorted Coefficients in Increasing Order for Portuguese Data",
yaxis = list(title = "Coefficient Value"))
# For math Data
sorted_names <- names(sort(sorted_coefficientsMath))
factor_names <- factor(names(sorted_coefficientsMath), levels = sorted_names)
plot_ly(x = factor_names, y = sorted_coefficientsMath, type = 'bar') %>%
layout(title = "Sorted Coefficients in Increasing Order for Math Data",
yaxis = list(title = "Coefficient Value"))
important_features_Por <- c("school", "failures", "schoolsup", "higher", "sex", "studytime", "activities", "romantic", "health")
important_features_Math <- c("sex", "studytime", "failures", "schoolsup", "famsup", "romantic", "goout", "absences", "Mjobhealth", "Mjobservices", "Fjobother", "Fjobservices")
set.seed(123)
# Modeling for Portuguese Data
formulaPor <- as.formula(paste("G3 ~", paste(important_features_Por, collapse=" + ")))
model <- lm(formulaPor, data=porData)
summary(model)
coefficients <- coef(model)
sorted_coefficients <- coefficients[order(abs(coefficients), decreasing = TRUE)]
coefplot(model, title='Coefficient Plot for Portuguese Data',  sort = "magnitude")
predicted_values <- predict(model, newdata = test_data)
actual_values <- test_data$G3
rmse_por <- rmse(actual_values, predicted_values)
cat('RMSE for Portuguese Data:', rmse_por, '\n')
# Modeling for Math Data
formulaMath <- as.formula(paste("G3 ~", paste(important_features_Math, collapse=" + ")))
modelMath <- lm(formulaMath, data=mathData)
summary(modelMath)
coefficientsMath <- coef(modelMath)
sorted_coefficientsMath <- coefficientsMath[order(abs(coefficientsMath), decreasing = TRUE)]
coefplot(modelMath, title='Coefficient Plot for Math Data',  sort = "magnitude")
predicted_values_math <- predict(modelMath, newdata = test_data)
actual_values_math <- test_data$G3
rmse_math <- rmse(actual_values_math, predicted_values_math)
cat('RMSE for Math Data:', rmse_math, '\n')
mathData$Avg_alc <- (mathData$Dalc + mathData$Walc)/2
mathData <- mathData %>% select(-Dalc, -Walc)
porData$Avg_alc <- (porData$Dalc + porData$Walc)/2
porData <- porData %>% select(-Dalc, -Walc)
G3Por_cor <-  cor(porData)[,'G3']
G3Math_cor <-  cor(mathData)[,'G3']
sorted_names <- names(sort(G3Por_cor))
factor_names <- factor(names(G3Por_cor), levels = sorted_names)
plot_ly(x = factor_names, y = G3Por_cor, type = 'bar') %>%
layout(title = "Correlation of G3 with Other Variables in Increasing Order for Portuguese Data",
yaxis = list(title = "Correlation Coefficient"))
# For Math Data
sorted_names <- names(sort(G3Math_cor))
factor_names <- factor(names(G3Math_cor), levels = sorted_names)
plot_ly(x = factor_names, y = G3Math_cor, type = 'bar') %>%
layout(title = "Correlation of G3 with Other Variables in Increasing Order for Math Data",
yaxis = list(title = "Correlation Coefficient"))
set.seed(123)
# For Portuguese Data
cat('\n\n--------------For Portuguese Data--------------\n\n')
split = sample.split(porData$G3, SplitRatio = 0.8)
train_data = subset(porData, split == TRUE)
test_data = subset(porData, split == FALSE)
model <- lm(G3 ~ ., data = train_data)
print(summary(model))
# Compute RMSE for Portuguese Data
predicted_values <- predict(model, newdata = test_data)
actual_values <- test_data$G3
rmse_por <- rmse(actual_values, predicted_values)
cat('RMSE for Portuguese Data:', rmse_por, '\n')
# For Math Data
cat('\n\n--------------For Math Data--------------\n\n')
split = sample.split(mathData$G3, SplitRatio = 0.8)
train_data = subset(mathData, split == TRUE)
test_data = subset(mathData, split == FALSE)
modelMath <- lm(G3 ~ ., data = train_data)
print(summary(modelMath))
# Compute RMSE for Math Data
predicted_values_math <- predict(modelMath, newdata = test_data)
actual_values_math <- test_data$G3
rmse_math <- rmse(actual_values_math, predicted_values_math)
cat('RMSE for Math Data:', rmse_math, '\n')
coefficients <- coef(model)
sorted_coefficients <- coefficients[order(abs(coefficients), decreasing = TRUE)]
sorted_names <- names(sort(sorted_coefficients))
factor_names <- factor(names(sorted_coefficients), levels = sorted_names)
plot_ly(x = factor_names, y = sorted_coefficients, type = 'bar') %>%
layout(title = "Sorted Coefficients in Increasing Order for Portuguese Data",
yaxis = list(title = "Coefficient Value"))
# For math Data
coefficientsMath <- coef(modelMath)
sorted_coefficientsMath <- coefficientsMath[order(abs(coefficientsMath), decreasing = TRUE)]
sorted_names <- names(sort(sorted_coefficientsMath))
factor_names <- factor(names(sorted_coefficientsMath), levels = sorted_names)
plot_ly(x = factor_names, y = sorted_coefficientsMath, type = 'bar') %>%
layout(title = "Sorted Coefficients in Increasing Order for Math Data",
yaxis = list(title = "Coefficient Value"))
combinedData <- rbind(mathData, porData)
View(combinedData)
corValues <- cor(combinedData)
AlcAll_cor <-  cor(combinedData)[,'Avg_alc']
sorted_names <- names(sort(AlcAll_cor))
factor_names <- factor(names(AlcAll_cor), levels = sorted_names)
plot_ly(x = factor_names, y = AlcAll_cor, type = 'bar') %>%
layout(title = "Correlation of Avg_alc with Other Variables in Increasing Order for Combined data",
yaxis = list(title = "Correlation Coefficient"))
cat('\n\n--------------For Combined Data--------------\n\n')
split = sample.split(combinedData$Avg_alc, SplitRatio = 0.8)
train_data = subset(combinedData, split == TRUE)
test_data = subset(combinedData, split == FALSE)
modelAll <- lm(Avg_alc ~ ., data = train_data)
print(summary(modelAll))
predicted_values_math <- predict(modelAll, newdata = test_data)
actual_values_math <- test_data$Avg_alc
rmse_math <- rmse(actual_values_math, predicted_values_math)
cat('RMSE for All Data for Alcohol Consumption:', rmse_math, '\n')
coefficients <- coef(modelAll)
sorted_coefficients <- coefficients[order(abs(coefficients), decreasing = TRUE)]
sorted_names <- names(sort(sorted_coefficients))
factor_names <- factor(names(sorted_coefficients), levels = sorted_names)
plot_ly(x = factor_names, y = sorted_coefficients, type = 'bar') %>%
layout(title = "Sorted Coefficients in Increasing Order for Alcohol Consumption for combined Data ",
yaxis = list(title = "Coefficient Value"))
mathData
